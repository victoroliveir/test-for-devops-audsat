pipeline {
    agent any // Usa qualquer agente disponível

    stages {
        stage('Compilação') { // Estágio de compilação
            agent {
                docker { image 'maven:latest' } // Usa uma imagem Docker com Maven para compilar o código
            }
            steps {
                sh 'mvn clean package' // Executa o comando Maven para limpar e compilar o código
            }
        }
        stage('Teste') { // Estágio de teste
            agent {
                docker { image 'maven:latest' } // Usa uma imagem Docker com Maven para executar os testes
            }
            steps {
                sh 'mvn test' // Executa os testes do Maven
            }
        }
        stage('Implantação no Kubernetes') { // Estágio de implantação no Kubernetes
            agent {
                docker { 
                    image 'bitnami/kubectl' // Usa uma imagem Docker com kubectl para interagir com o Kubernetes
                    args '-i --entrypoint=' // Argumentos para o contêiner Docker
                }
            }
            environment {
                KUBECONFIG = credentials('kubeconfig_minikube') // Configura a variável de ambiente KUBECONFIG com as credenciais do Kubernetes
            }
            steps {
                script {
                    withCredentials([file(credentialsId: 'kubeconfig_minikube', variable: 'KUBECONFIG')]) {
                        sh 'kubectl apply -n audsat -f k8s/deployment.yaml --kubeconfig=$KUBECONFIG' // Aplica as configurações de implantação usando o kubectl
                    }
                }
            }
        }
    }
}
