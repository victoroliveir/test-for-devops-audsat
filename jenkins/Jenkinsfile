pipeline {
    agent any

    environment {
        POM_VERSION = "" // Variável para armazenar a versão do POM
    }

    stages {
        stage('Build') { // Estágio para construir o projeto
            agent {
                docker { image 'maven' } // Usa uma imagem Docker com Maven
            }
            steps {
                sh "mvn package -Dmaven.test.skip=true" // Executa o comando Maven para empacotar o projeto, ignorando os testes
                script {
                    pom = readMavenPom file: 'pom.xml' // Lê o arquivo pom.xml para obter informações do projeto
                    POM_VERSION = pom.version // Armazena a versão do projeto
                }
                stash 'source' // Empacota o código fonte para uso posterior em outros estágios
            }
        }

//        stage('Test') { // Estágio para executar testes
//            steps {
//                unstash 'source' // Recupera o código fonte empacotado
//                sh "mvn test" // Executa os testes Maven
//            }
//        }
//
//        stage('Docker build') { // Estágio para construir a imagem Docker
//            steps {
//                unstash 'source' // Recupera o código fonte empacotado
//                sh "docker build . -t netodevel/netodevel-api:${POM_VERSION}" // Constrói a imagem Docker com base no código fonte e na versão do POM
//            }
//        }
//
//        stage('Docker push to registry') { // Estágio para enviar a imagem Docker para o registro
//            steps {
//                script {
//                    withCredentials([string(credentialsId: 'docker_hub_pat',variable: 'dockerHubPat')]) {
//                        sh "docker login -u netodevel -p ${dockerHubPat}" // Faz login no registro Docker
//                        sh "docker push netodevel/netodevel-api:${POM_VERSION}" // Envia a imagem Docker para o registro
//                    }
//                }
//            }
//        }
//
//        stage('Apply Kubernetes files') { // Estágio para aplicar arquivos Kubernetes
//            steps {
//                withKubeConfig([credentialsId: 'kind-cluster-config', serverUrl: 'https://127.0.0.1:35433']) {
//                  sh 'kubectl apply -f k8s' // Aplica os arquivos de configuração do Kubernetes
//                  sh 'kubectl rollout restart deployment netodevel-api' // Reinicia a implantação no Kubernetes para aplicar as alterações
//                }
//            }
//        }
    }
}
